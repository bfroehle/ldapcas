<?php
// $Id$

function ldapcas_menu() {

  $items = array();

  $items['admin/settings/ldap/ldapcas'] = array(
    'title' => 'CAS',
    'description' => 'Configure LDAP synchronization settings when logging in with CAS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldapcas_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function ldapcas_settings() {
  $form['fetching'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fetching options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['fetching']['ldapcas_everylogin'] = array(
     '#type' => 'radios',
     '#title' => t('Fetch LDAP user data upon CAS login'),
     '#options' => array(0 => t('Only when account is created.'), 1 => t('Every time user logs in.')),
     '#default_value' => variable_get('ldapcas_everylogin', 0),
  );
  
  if( variable_get('cas_authmap',0) ) {
    $form['fetching']['ldapcas_everylogin']['#description'] = '<div class="error">LDAP CAS is incompatible with the "Is Drupal also the CAS user repository?" option in ' . l(t("CAS settings"), "admin/user/cas") . '</div>';
  }
  
  return system_settings_form($form);
}

/**
 * Implements hook_user.
 */
function ldapcas_user($op, &$edit, &$account, $category = NULL)
{
  switch ($op) {
    case 'login':
      _ldapcas_user_login($account);
      break;
  }
}

/**
 * Updates the user's ldap data on login.
 */
function _ldapcas_user_login(&$user)
{
  $authmap = user_get_authmaps($user->name);
  if (!isset($authmap['cas'])) {
    return;
  }

  $dofetch =  $_SESSION['cas_first_login'] || variable_get("ldapcas_everylogin",FALSE);

  if ( module_exists("ldapauth") ) {
    // Call init hook to execute neccessary includes and requires.
    module_invoke("ldapauth", "init");
  }
  else {
    // LDAP auth module not installed or activated.
    return;
  }
  
  _ldapcas_update_user($user);
  
  if ( module_exists("ldapdata") && $dofetch ) {
   global $_ldapauth_ldap;
    if ($entry = $_ldapauth_ldap->retrieveAttributes($user->ldap_dn)) {
      watchdog('ldapcas', "Fetching user data for '%user'.", array('%user' => $user->ldap_dn));
      $ldap_drupal_reverse_mappings = _ldapdata_reverse_mappings($user->ldap_config);

      // Retrieve profile fields list.
      $profile_fields = _ldapdata_retrieve_profile_fields();
      $drupal_fields = array();
      foreach ($ldap_drupal_reverse_mappings as $drupal_field => $ldap_attr) {
        $value = isset($entry[strtolower($ldap_attr)]) ? $entry[strtolower($ldap_attr)][0] : '';

        // Is it a profile field?
        if (is_numeric($drupal_field)) {
          if ($profile_field = isset($profile_fields[$drupal_field]) ? $profile_fields[$drupal_field] : NULL) {
            if ($row = db_fetch_array(db_query("SELECT value FROM {profile_values} WHERE fid = '%d' AND uid = '%d'", $drupal_field, $user->uid))) {
              if ($row['value'] != $value)
                db_query("UPDATE {profile_values} SET value = '%s' WHERE fid = '%d' AND uid = '%d'", $value, $drupal_field, $user->uid);
            }
            else {
              db_query("INSERT INTO {profile_values} (value, fid, uid) VALUES ('%s', '%d', '%d')", $value, $drupal_field, $user->uid);
            }
            $user->$drupal_field = $value;
          }
        }
        // Then it might be a Drupal field.
        else if (isset($user->$drupal_field) && !in_array($drupal_field, array('pass'))) {
          $drupal_fields = array_merge($drupal_fields, array($drupal_field => $value));
        }
      }
      if (!empty($drupal_fields))
         $user = user_save($user, $drupal_fields);
    }
    $_ldapauth_ldap->disconnect();
  }
}

/**
 * Updates the user object with some LDAP specific attributes:
 * - $user->ldap_config contains the sid of the ldap server
 * - $user->ldap_dn contains the DN used to search for the user   
 */
function _ldapcas_update_user(&$user)
{
  $result = db_query("SELECT sid FROM {ldapauth} WHERE status = '%d' ORDER BY sid", 1);
  while ($row = db_fetch_object($result)) {
    // Cycle thru the authentication schemes - first successful one wins.
    // Instantiate ldap.
    _ldapauth_init($row->sid);
    $ldap_user_entry = _ldapauth_user_lookup($user->name);
    if ($ldap_user_entry)
    {
      $user->ldap_config = $row->sid;
      $user->ldap_dn = $ldap_user_entry['dn'];
      break;
    }
  }
}